const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const token = 'token here';
const bot = new TelegramBot(token);

// URL –≤–∞—à–µ–≥–æ Mini App
const miniAppUrl = 'https://nucoffee.kz';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
const port = 2004;
const webhookUrl = 'https://nucoffee.kz'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω

// –í–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json());

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;

    // ‚úÖ User info
    const user = msg.from;
    const userInfo = {
        id: user.id,
        is_bot: user.is_bot,
        first_name: user.first_name,
        last_name: user.last_name || '',
        username: user.username || '',
        language_code: user.language_code || '',
        timestamp: new Date().toISOString()
    };

    // üìù Log to console
    console.log('üë§ New user:', userInfo);

    // üíæ Optionally write to a log file
    const fs = require('fs');
    fs.appendFileSync('user_log.json', JSON.stringify(userInfo) + ',\n');

    // üéØ Send welcome + button
    const keyboard = {
        inline_keyboard: [[
            {
                text: '–û—Ç–∫—Ä—ã—Ç—å Mini App',
                web_app: { url: miniAppUrl }
            }
        ]]
    };

    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App:', {
        reply_markup: keyboard
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.log(error);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app.post('/webhook', (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
bot.setWebHook(`${webhookUrl}/webhook`)
    .then(() => {
        console.log('–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    })
    .catch((error) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
    });



// New API route to send order info via Telegram
app.post('/api/send-order', async (req, res) => {
    const { chatId, order, client } = req.body;

    if (!chatId || !order || !client) {
        return res.status(400).json({ error: 'Missing required fields: chatId, order, client' });
    }

    // Format order items
    const itemsList = order.items.map((item, index) => 
        `${index + 1}. ${item.name} x${item.quantity} - ${item.price}‚Ç∏`
    ).join('\n');

    const message = `
üõçÔ∏è *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*

üë§ *–ö–ª–∏–µ–Ω—Ç:*
–ò–º—è: ${client.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}
Email: ${client.email}

üßæ *–ó–∞–∫–∞–∑:*
${itemsList}

üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${order.total}‚Ç∏
    `;

    try {
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        res.status(200).json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
    }
});




// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});